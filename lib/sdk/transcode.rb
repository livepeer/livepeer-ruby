# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'faraday'
require 'faraday/multipart'
require 'sorbet-runtime'

module Livepeer
  extend T::Sig
  class Transcode

    extend T::Sig
    sig { params(sdk_config: SDKConfiguration).void }
    def initialize(sdk_config)
      @sdk_configuration = sdk_config
    end

    sig { params(request: Shared::TranscodePayload).returns(Utils::FieldAugmented) }
    def create(request)
      # create - Transcode a video
      # `POST /transcode` transcodes a video file and uploads the results to the
      # specified storage service. 
      # \
      # \
      # Transcoding is asynchronous so you will need to check the status of the
      # task in order to determine when transcoding is complete. The `id` field
      # in the response is the unique ID for the transcoding `Task`. The task
      # status can be queried using the [GET tasks
      # endpoint](https://docs.livepeer.org/reference/api/get-tasks):
      # \
      # \
      # When `status.phase` is `completed`,  transcoding will be complete and
      # the results will be stored in the storage service and the specified
      # output location.
      # \
      # \
      # The results will be available under `params.outputs.hls.path` and
      # `params.outputs.mp4.path` in the specified storage service.
      # ## Input
      # \
      # This endpoint currently supports the following inputs:
      # - HTTP
      # - S3 API Compatible Service
      # \
      # \
      # **HTTP**
      # \
      # A public HTTP URL can be used to read a video file.
      # ```json
      # {
      #     "url": "https://www.example.com/video.mp4"
      # }
      # ```
      # | Name | Type   | Description                          |
      # | ---- | ------ | ------------------------------------ |
      # | url  | string | A public HTTP URL for the video file. |
      # 
      # Note: For IPFS HTTP gateway URLs, the API currently only supports “path
      # style” URLs and does not support “subdomain style” URLs. The API will
      # support both styles of URLs in a future update.
      # \
      # \
      # **S3 API Compatible Service**
      # \
      # \
      # S3 credentials can be used to authenticate with a S3 API compatible
      # service to read a video file.
      # 
      # ```json
      # {
      #     "type": "s3",
      #     "endpoint": "https://gateway.storjshare.io",
      #     "credentials": {
      #         "accessKeyId": "$ACCESS_KEY_ID",
      #         "secretAccessKey": "$SECRET_ACCESS_KEY"
      #     },
      #     "bucket": "inbucket",
      #     "path": "/video/source.mp4"
      # }
      # ```
      # 
      # 
      # ## Storage
      # \
      # This endpoint currently supports the following storage services:
      # - S3 API Compatible Service
      # - Web3 Storage
      # \
      # \
      # **S3 API Compatible Service**
      # ```json
      # {
      #   "type": "s3",
      #     "endpoint": "https://gateway.storjshare.io",
      #     "credentials": {
      #         "accessKeyId": "$ACCESS_KEY_ID",
      #         "secretAccessKey": "$SECRET_ACCESS_KEY"
      #     },
      #     "bucket": "mybucket"
      # }
      # ```
      # 
      # **Web3 Storage**
      # 
      # ```json
      # {
      #   "type": "web3.storage",
      #     "credentials": {
      #         "proof": "$UCAN_DELEGATION_PROOF",
      #     }
      # }
      # ```
      # 
      # 
      # 
      # ## Outputs
      # \
      # This endpoint currently supports the following output types:
      # - HLS
      # - MP4
      # 
      # **HLS**
      # 
      # ```json
      # {
      #   "hls": {
      #         "path": "/samplevideo/hls"
      #     }
      # }
      # ```
      # 
      # 
      # **MP4**
      # 
      # ```json
      # {
      #   "mp4": {
      #         "path": "/samplevideo/mp4"
      #     }
      # }
      # ```
      # 
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/transcode"
      headers = {}
      req_content_type, data, form = Utils.serialize_request_body(request, :request, :json)
      headers['content-type'] = req_content_type
      raise StandardError, 'request body is required' if data.nil? && form.nil?
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.post(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::TranscodeResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::Task)
          res.task = out
        end
      end
      res
    end
  end
end
