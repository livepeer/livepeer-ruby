# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'faraday'
require 'faraday/multipart'
require 'sorbet-runtime'

module Livepeer
  extend T::Sig
  class Metrics

    extend T::Sig
    sig { params(sdk_config: SDKConfiguration).void }
    def initialize(sdk_config)
      @sdk_configuration = sdk_config
    end

    sig { params(request: T.nilable(Operations::GetViewershipsMetricsRequest)).returns(Utils::FieldAugmented) }
    def get_viewership(request)
      # get_viewership - Query viewership metrics
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/data/views/query"
      headers = {}
      query_params = Utils.get_query_params(Operations::GetViewershipsMetricsRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::GetViewershipsMetricsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, T::Array[Shared::ViewershipMetric])
          res.data = out
        end
      end
      res
    end

    sig { params(request: T.nilable(Operations::GetCreatorMetricsRequest)).returns(Utils::FieldAugmented) }
    def get_creator_viewership(request)
      # get_creator_viewership - Query creator viewership metrics
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/data/views/query/creator"
      headers = {}
      query_params = Utils.get_query_params(Operations::GetCreatorMetricsRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::GetCreatorMetricsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, T::Array[Shared::ViewershipMetric])
          res.data = out
        end
      end
      res
    end

    sig { params(playback_id: String).returns(Utils::FieldAugmented) }
    def get_public_total_views(playback_id)
      # get_public_total_views - Query public total views metrics
      request = Operations::GetPublicTotalViewsMetricsRequest.new(
        
        playback_id: playback_id
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::GetPublicTotalViewsMetricsRequest,
        base_url,
        '/data/views/query/total/{playbackId}',
        request
      )
      headers = {}
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::GetPublicTotalViewsMetricsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Operations::GetPublicTotalViewsMetricsData)
          res.data = out
        end
      end
      res
    end

    sig { params(from: T.nilable(Integer), to: T.nilable(Integer), time_step: T.nilable(Operations::GetUsageMetricsQueryParamTimeStep), creator_id: T.nilable(String)).returns(Utils::FieldAugmented) }
    def get_usage(from = nil, to = nil, time_step = nil, creator_id = nil)
      # get_usage - Query usage metrics
      request = Operations::GetUsageMetricsRequest.new(
        
        from: from,
        to: to,
        time_step: time_step,
        creator_id: creator_id
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/data/usage/query"
      headers = {}
      query_params = Utils.get_query_params(Operations::GetUsageMetricsRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::GetUsageMetricsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::UsageMetric)
          res.usage_metric = out
        end
      end
      res
    end
  end
end
