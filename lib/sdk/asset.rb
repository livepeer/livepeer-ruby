# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'faraday'
require 'faraday/multipart'
require 'sorbet-runtime'

module Livepeer
  extend T::Sig
  class Asset

    extend T::Sig
    sig { params(sdk_config: SDKConfiguration).void }
    def initialize(sdk_config)
      @sdk_configuration = sdk_config
    end

    sig { returns(Utils::FieldAugmented) }
    def get_all
      # get_all - Retrieve assets
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/asset"
      headers = {}
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::GetAssetsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, T::Array[Shared::Asset])
          res.classes = out
        end
      end
      res
    end

    sig { params(request: Shared::NewAssetPayload).returns(Utils::FieldAugmented) }
    def create(request)
      # create - Upload an asset
      # To upload an asset, your first need to request for a direct upload URL
      # and only then actually upload the contents of the asset.
      # \
      # \
      # Once you created a upload link, you have 2 options, resumable or direct
      # upload. For a more reliable experience, you should use resumable uploads
      # which will work better for users with unreliable or slow network
      # connections. If you want a simpler implementation though, you should
      # just use a direct upload.
      # 
      # 
      # ## Direct Upload
      # For a direct upload, make a PUT request to the URL received in the url
      # field of the response above, with the raw video file as the request
      # body. response above:
      # 
      # 
      # ## Resumable Upload
      # Livepeer supports resumable uploads via Tus. This section provides a
      # simple example of how to use tus-js-client to upload a video file.
      # \
      # \
      # From the previous section, we generated a URL to upload a video file to
      # Livepeer on POST /api/asset/request-upload. You should use the
      # tusEndpoint field of the response to upload the video file and track the
      # progress:
      # 
      # ``` 
      # # This assumes there is an `input` element of `type="file"` with id
      # `fileInput` in the HTML
      # 
      # 
      # const input = document.getElementById('fileInput');
      # 
      # const file = input.files[0];
      # 
      # const upload = new tus.Upload(file, {
      #   endpoint: tusEndpoint, // URL from `tusEndpoint` field in the
      # `/request-upload` response
      #   metadata: {
      #     filename,
      #     filetype: 'video/mp4',
      #   },
      #   uploadSize: file.size,
      #   onError(err) {
      #     console.error('Error uploading file:', err);
      #   },
      #   onProgress(bytesUploaded, bytesTotal) {
      #     const percentage = ((bytesUploaded / bytesTotal) * 100).toFixed(2);
      #     console.log('Uploaded ' + percentage + '%');
      #   },
      #   onSuccess() {
      #     console.log('Upload finished:', upload.url);
      #   },
      # });
      # 
      # const previousUploads = await upload.findPreviousUploads();
      # 
      # if (previousUploads.length > 0) {
      #   upload.resumeFromPreviousUpload(previousUploads[0]);
      # }
      # 
      # upload.start();
      # 
      # ```
      # 
      # > Note: If you are using tus from node.js, you need to add a custom URL
      # storage to enable resuming from previous uploads. On the browser, this
      # is enabled by default using local storage. In node.js, add urlStorage:
      # new tus.FileUrlStorage("path/to/tmp/file"), to the UploadFile object
      # definition above.
      # 
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/asset/request-upload"
      headers = {}
      req_content_type, data, form = Utils.serialize_request_body(request, :request, :json)
      headers['content-type'] = req_content_type
      raise StandardError, 'request body is required' if data.nil? && form.nil?
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.post(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::RequestUploadResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Operations::RequestUploadResponseBody)
          res.object = out
        end
      end
      res
    end

    sig { params(request: Shared::NewAssetPayload).returns(Utils::FieldAugmented) }
    def create_via_url(request)
      # create_via_url - Upload asset via URL
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/asset/upload/url"
      headers = {}
      req_content_type, data, form = Utils.serialize_request_body(request, :request, :json)
      headers['content-type'] = req_content_type
      raise StandardError, 'request body is required' if data.nil? && form.nil?
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.post(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::UploadAssetViaURLResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Operations::UploadAssetViaURLResponseBody)
          res.object = out
        end
      end
      res
    end

    sig { params(asset_id: String).returns(Utils::FieldAugmented) }
    def delete(asset_id)
      # delete - Delete an asset
      request = Operations::DeleteAssetRequest.new(
        
        asset_id: asset_id
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::DeleteAssetRequest,
        base_url,
        '/asset/{assetId}',
        request
      )
      headers = {}
      headers['Accept'] = '*/*'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.delete(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::DeleteAssetResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 204
      end
      res
    end

    sig { params(asset_id: String).returns(Utils::FieldAugmented) }
    def get(asset_id)
      # get - Retrieves an asset
      request = Operations::GetAssetRequest.new(
        
        asset_id: asset_id
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::GetAssetRequest,
        base_url,
        '/asset/{assetId}',
        request
      )
      headers = {}
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::GetAssetResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::Asset)
          res.asset = out
        end
      end
      res
    end

    sig { params(asset_id: String, asset_patch_payload: Shared::AssetPatchPayload).returns(Utils::FieldAugmented) }
    def update(asset_id, asset_patch_payload)
      # update - Patch an asset
      request = Operations::UpdateAssetRequest.new(
        
        asset_id: asset_id,
        asset_patch_payload: asset_patch_payload
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::UpdateAssetRequest,
        base_url,
        '/asset/{assetId}',
        request
      )
      headers = {}
      req_content_type, data, form = Utils.serialize_request_body(request, :asset_patch_payload, :json)
      headers['content-type'] = req_content_type
      raise StandardError, 'request body is required' if data.nil? && form.nil?
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.patch(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::UpdateAssetResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::Asset)
          res.asset = out
        end
      end
      res
    end
  end
end
