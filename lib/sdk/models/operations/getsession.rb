# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'
require_relative '../shared/session'

module Livepeer
  module Operations

    class GetSessionRequest < Livepeer::Utils::FieldAugmented
      extend T::Sig

      # ID of the session
      field :id, String, { 'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': false } }


      sig { params(id: String).void }
      def initialize(id: nil)
        @id = id
      end
    end


    class GetSessionResponse < Livepeer::Utils::FieldAugmented
      extend T::Sig

      # HTTP response content type for this operation
      field :content_type, String
      # HTTP response status code for this operation
      field :status_code, Integer
      # Raw HTTP response; suitable for custom response parsing
      field :raw_response, T.nilable(Faraday::Response)
      # Success
      field :session, T.nilable(Shared::Session)


      sig { params(content_type: String, status_code: Integer, raw_response: T.nilable(Faraday::Response), session: T.nilable(Shared::Session)).void }
      def initialize(content_type: nil, status_code: nil, raw_response: nil, session: nil)
        @content_type = content_type
        @status_code = status_code
        @raw_response = raw_response
        @session = session
      end
    end
  end
end
