# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'
require_relative '../shared/asset_patch_payload'
require_relative '../shared/asset'

module Livepeer
  module Operations

    class UpdateAssetRequest < Livepeer::Utils::FieldAugmented
      extend T::Sig


      field :asset_patch_payload, Shared::AssetPatchPayload, { 'request': { 'media_type': 'application/json' } }
      # ID of the asset
      field :asset_id, String, { 'path_param': { 'field_name': 'assetId', 'style': 'simple', 'explode': false } }


      sig { params(asset_patch_payload: Shared::AssetPatchPayload, asset_id: String).void }
      def initialize(asset_patch_payload: nil, asset_id: nil)
        @asset_patch_payload = asset_patch_payload
        @asset_id = asset_id
      end
    end


    class UpdateAssetResponse < Livepeer::Utils::FieldAugmented
      extend T::Sig

      # HTTP response content type for this operation
      field :content_type, String
      # HTTP response status code for this operation
      field :status_code, Integer
      # Success
      field :asset, T.nilable(Shared::Asset)
      # Raw HTTP response; suitable for custom response parsing
      field :raw_response, T.nilable(Faraday::Response)


      sig { params(content_type: String, status_code: Integer, asset: T.nilable(Shared::Asset), raw_response: T.nilable(Faraday::Response)).void }
      def initialize(content_type: nil, status_code: nil, asset: nil, raw_response: nil)
        @content_type = content_type
        @status_code = status_code
        @asset = asset
        @raw_response = raw_response
      end
    end
  end
end
