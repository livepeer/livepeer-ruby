# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'
require_relative '../shared/asset'

module Livepeer
  module Operations

    class UploadAssetViaURLTask < Livepeer::Utils::FieldAugmented
      extend T::Sig


      field :id, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('id') } }


      sig { params(id: T.nilable(String)).void }
      def initialize(id: nil)
        @id = id
      end
    end

    # Success
    class UploadAssetViaURLData < Livepeer::Utils::FieldAugmented
      extend T::Sig


      field :asset, Shared::Asset, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('asset') } }

      field :task, Operations::UploadAssetViaURLTask, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('task') } }


      sig { params(asset: Shared::Asset, task: Operations::UploadAssetViaURLTask).void }
      def initialize(asset: nil, task: nil)
        @asset = asset
        @task = task
      end
    end


    class UploadAssetViaURLResponse < Livepeer::Utils::FieldAugmented
      extend T::Sig

      # HTTP response content type for this operation
      field :content_type, String
      # HTTP response status code for this operation
      field :status_code, Integer
      # Success
      field :data, T.nilable(Operations::UploadAssetViaURLData)
      # Raw HTTP response; suitable for custom response parsing
      field :raw_response, T.nilable(Faraday::Response)


      sig { params(content_type: String, status_code: Integer, data: T.nilable(Operations::UploadAssetViaURLData), raw_response: T.nilable(Faraday::Response)).void }
      def initialize(content_type: nil, status_code: nil, data: nil, raw_response: nil)
        @content_type = content_type
        @status_code = status_code
        @data = data
        @raw_response = raw_response
      end
    end
  end
end
