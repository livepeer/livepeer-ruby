# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'

module Livepeer
  module Operations

    class UpdateSigningKeyRequestBody < Livepeer::Utils::FieldAugmented
      extend T::Sig


      field :disabled, T.nilable(T::Boolean), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('disabled') } }

      field :name, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('name') } }


      sig { params(disabled: T.nilable(T::Boolean), name: T.nilable(String)).void }
      def initialize(disabled: nil, name: nil)
        @disabled = disabled
        @name = name
      end
    end


    class UpdateSigningKeyRequest < Livepeer::Utils::FieldAugmented
      extend T::Sig

      # ID of the signing key
      field :key_id, String, { 'path_param': { 'field_name': 'keyId', 'style': 'simple', 'explode': false } }

      field :request_body, Operations::UpdateSigningKeyRequestBody, { 'request': { 'media_type': 'application/json' } }


      sig { params(key_id: String, request_body: Operations::UpdateSigningKeyRequestBody).void }
      def initialize(key_id: nil, request_body: nil)
        @key_id = key_id
        @request_body = request_body
      end
    end


    class UpdateSigningKeyResponse < Livepeer::Utils::FieldAugmented
      extend T::Sig

      # HTTP response content type for this operation
      field :content_type, String
      # HTTP response status code for this operation
      field :status_code, Integer
      # Raw HTTP response; suitable for custom response parsing
      field :raw_response, T.nilable(Faraday::Response)


      sig { params(content_type: String, status_code: Integer, raw_response: T.nilable(Faraday::Response)).void }
      def initialize(content_type: nil, status_code: nil, raw_response: nil)
        @content_type = content_type
        @status_code = status_code
        @raw_response = raw_response
      end
    end
  end
end
