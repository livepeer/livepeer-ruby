# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'
require_relative '../shared/playback_policy'

module Livepeer
  module Shared

    class NewAssetPayloadStorage < Livepeer::Utils::FieldAugmented
      extend T::Sig

      # Set to true to make default export to IPFS. To customize the
      # pinned files, specify an object with a spec field. False or null
      # means to unpin from IPFS, but it's unsupported right now.
      # 
      field :ipfs, T.nilable(Object), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('ipfs') } }


      sig { params(ipfs: T.nilable(Object)).void }
      def initialize(ipfs: nil)
        @ipfs = ipfs
      end
    end


    class NewAssetPayloadEncryption < Livepeer::Utils::FieldAugmented
      extend T::Sig

      # Encryption key used to encrypt the asset. Only writable in the upload asset endpoints and cannot be retrieved back.
      field :encrypted_key, String, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('encryptedKey') } }


      sig { params(encrypted_key: String).void }
      def initialize(encrypted_key: nil)
        @encrypted_key = encrypted_key
      end
    end


    class NewAssetPayload < Livepeer::Utils::FieldAugmented
      extend T::Sig

      # Name of the asset. This is not necessarily the filename, can be a
      # custom name or title
      # 
      field :name, String, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('name') } }
      # Decides if the output video should include C2PA signature
      field :c2pa, T.nilable(T::Boolean), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('c2pa') } }

      field :creator_id, T.nilable(Object), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('creatorId') } }

      field :encryption, T.nilable(Shared::NewAssetPayloadEncryption), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('encryption') } }
      # Whether the playback policy for a asset or stream is public or signed
      field :playback_policy, T.nilable(Shared::PlaybackPolicy), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('playbackPolicy') } }
      # Whether to generate MP4s for the asset.
      field :static_mp4, T.nilable(T::Boolean), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('staticMp4') } }

      field :storage, T.nilable(Shared::NewAssetPayloadStorage), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('storage') } }
      # URL where the asset contents can be retrieved. Only allowed (and
      # also required) in the upload asset via URL endpoint. For an IPFS
      # source, this should be similar to: `ipfs://{CID}`. For an Arweave
      # source: `ar://{CID}`.
      # 
      field :url, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('url') } }


      sig { params(name: String, c2pa: T.nilable(T::Boolean), creator_id: T.nilable(Object), encryption: T.nilable(Shared::NewAssetPayloadEncryption), playback_policy: T.nilable(Shared::PlaybackPolicy), static_mp4: T.nilable(T::Boolean), storage: T.nilable(Shared::NewAssetPayloadStorage), url: T.nilable(String)).void }
      def initialize(name: nil, c2pa: nil, creator_id: nil, encryption: nil, playback_policy: nil, static_mp4: nil, storage: nil, url: nil)
        @name = name
        @c2pa = c2pa
        @creator_id = creator_id
        @encryption = encryption
        @playback_policy = playback_policy
        @static_mp4 = static_mp4
        @storage = storage
        @url = url
      end
    end
  end
end
