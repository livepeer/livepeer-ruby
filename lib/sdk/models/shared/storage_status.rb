# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'

module Livepeer
  module Shared
    # Phase - Phase of the asset storage
    class Phase < T::Enum
      enums do
        WAITING = new('waiting')
        PROCESSING = new('processing')
        READY = new('ready')
        FAILED = new('failed')
        REVERTED = new('reverted')
      end
    end



    class Tasks < Livepeer::Utils::FieldAugmented
      extend T::Sig

      # ID of the last task to fail execution.
      field :failed, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('failed') } }
      # ID of the last task to run successfully, that created
      # the currently saved data.
      # 
      field :last, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('last') } }
      # ID of any currently running task that is exporting this
      # asset to IPFS.
      # 
      field :pending, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('pending') } }


      sig { params(failed: T.nilable(String), last: T.nilable(String), pending: T.nilable(String)).void }
      def initialize(failed: nil, last: nil, pending: nil)
        @failed = failed
        @last = last
        @pending = pending
      end
    end


    class StorageStatus < Livepeer::Utils::FieldAugmented
      extend T::Sig

      # Phase of the asset storage
      field :phase, Shared::Phase, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('phase'), 'decoder': Utils.enum_from_string(Shared::Phase, false) } }

      field :tasks, Shared::Tasks, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('tasks') } }
      # Error message if the last storage changed failed.
      field :error_message, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('errorMessage') } }
      # Current progress of the task updating the storage.
      field :progress, T.nilable(Float), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('progress') } }


      sig { params(phase: Shared::Phase, tasks: Shared::Tasks, error_message: T.nilable(String), progress: T.nilable(Float)).void }
      def initialize(phase: nil, tasks: nil, error_message: nil, progress: nil)
        @phase = phase
        @tasks = tasks
        @error_message = error_message
        @progress = progress
      end
    end
  end
end
