# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'
require_relative '../shared/playback_policy'
require_relative '../shared/storage'

module Livepeer
  module Shared

    class AssetPatchPayload < Livepeer::Utils::FieldAugmented
      extend T::Sig


      field :creator_id, T.nilable(Object), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('creatorId') } }
      # Name of the asset. This is not necessarily the filename, can be a
      # custom name or title
      # 
      field :name, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('name') } }
      # Whether the playback policy for a asset or stream is public or signed
      field :playback_policy, T.nilable(Shared::PlaybackPolicy), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('playbackPolicy') } }

      field :storage, T.nilable(Shared::Storage), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('storage') } }


      sig { params(creator_id: T.nilable(Object), name: T.nilable(String), playback_policy: T.nilable(Shared::PlaybackPolicy), storage: T.nilable(Shared::Storage)).void }
      def initialize(creator_id: nil, name: nil, playback_policy: nil, storage: nil)
        @creator_id = creator_id
        @name = name
        @playback_policy = playback_policy
        @storage = storage
      end
    end
  end
end
