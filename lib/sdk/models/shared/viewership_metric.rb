# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'

module Livepeer
  module Shared
    # An individual metric about viewership of an asset. Necessarily, at least
    # 1 of playbackId and dStorageUrl will be present, depending on the query.
    # 
    class ViewershipMetric < Livepeer::Utils::FieldAugmented
      extend T::Sig

      # The total playtime in minutes for the asset
      field :playtime_mins, Float, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('playtimeMins') } }
      # The number of views for the asset
      field :view_count, Integer, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('viewCount') } }
      # The browser used by the viewer
      field :browser, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('browser') } }
      # The browser engine used by the viewer's browser
      field :browser_engine, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('browserEngine') } }
      # The continent where the viewer is located
      field :continent, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('continent') } }
      # The country where the viewer is located
      field :country, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('country') } }
      # The CPU used by the viewer's device
      field :cpu, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('cpu') } }
      # The ID of the creator associated with the metric
      field :creator_id, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('creatorId') } }
      # The device used by the viewer
      field :device, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('device') } }
      # The type of the device used by the viewer
      field :device_type, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('deviceType') } }
      # The URL of the distributed storage used for the asset
      field :d_storage_url, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('dStorageUrl') } }
      # The error rate for the asset
      field :error_rate, T.nilable(Float), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('errorRate') } }
      # The percentage of sessions that existed before the asset started
      # playing
      # 
      field :exits_before_start, T.nilable(Float), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('exitsBeforeStart') } }
      # Geographic encoding of the viewers location. Accurate to 3 digits.
      field :geohas, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('geohas') } }
      # The operating system used by the viewer
      field :os, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('os') } }
      # The playback ID associated with the metric
      field :playback_id, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('playbackId') } }
      # The rebuffering ratio for the asset
      field :rebuffer_ratio, T.nilable(Float), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('rebufferRatio') } }
      # The subdivision (e.g., state or province) where the viewer is
      # located
      # 
      field :subdivision, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('subdivision') } }
      # Timestamp (in milliseconds) when the metric was recorded. If the
      # query contains a time step, this timestamp will point to the
      # beginning of the time step period.
      # 
      field :timestamp, T.nilable(Float), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('timestamp') } }
      # The timezone where the viewer is located
      field :timezone, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('timezone') } }
      # The time-to-first-frame (TTFF) in milliseconds
      field :ttff_ms, T.nilable(Float), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('ttffMs') } }
      # The ID of the viewer associated with the metric
      field :viewer_id, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('viewerId') } }


      sig { params(playtime_mins: Float, view_count: Integer, browser: T.nilable(String), browser_engine: T.nilable(String), continent: T.nilable(String), country: T.nilable(String), cpu: T.nilable(String), creator_id: T.nilable(String), device: T.nilable(String), device_type: T.nilable(String), d_storage_url: T.nilable(String), error_rate: T.nilable(Float), exits_before_start: T.nilable(Float), geohas: T.nilable(String), os: T.nilable(String), playback_id: T.nilable(String), rebuffer_ratio: T.nilable(Float), subdivision: T.nilable(String), timestamp: T.nilable(Float), timezone: T.nilable(String), ttff_ms: T.nilable(Float), viewer_id: T.nilable(String)).void }
      def initialize(playtime_mins: nil, view_count: nil, browser: nil, browser_engine: nil, continent: nil, country: nil, cpu: nil, creator_id: nil, device: nil, device_type: nil, d_storage_url: nil, error_rate: nil, exits_before_start: nil, geohas: nil, os: nil, playback_id: nil, rebuffer_ratio: nil, subdivision: nil, timestamp: nil, timezone: nil, ttff_ms: nil, viewer_id: nil)
        @playtime_mins = playtime_mins
        @view_count = view_count
        @browser = browser
        @browser_engine = browser_engine
        @continent = continent
        @country = country
        @cpu = cpu
        @creator_id = creator_id
        @device = device
        @device_type = device_type
        @d_storage_url = d_storage_url
        @error_rate = error_rate
        @exits_before_start = exits_before_start
        @geohas = geohas
        @os = os
        @playback_id = playback_id
        @rebuffer_ratio = rebuffer_ratio
        @subdivision = subdivision
        @timestamp = timestamp
        @timezone = timezone
        @ttff_ms = ttff_ms
        @viewer_id = viewer_id
      end
    end
  end
end
