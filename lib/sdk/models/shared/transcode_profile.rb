# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'

module Livepeer
  module Shared

    class TranscodeProfileProfile < T::Enum
      enums do
        H264_BASELINE = new('H264Baseline')
        H264_MAIN = new('H264Main')
        H264_HIGH = new('H264High')
        H264_CONSTRAINED_HIGH = new('H264ConstrainedHigh')
      end
    end



    class TranscodeProfileEncoder < T::Enum
      enums do
        H264 = new('h264')
        HEVC = new('hevc')
        VP8 = new('vp8')
        VP9 = new('vp9')
      end
    end


    # Transcode API profile
    class TranscodeProfile < Livepeer::Utils::FieldAugmented
      extend T::Sig


      field :bitrate, Integer, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('bitrate') } }

      field :encoder, T.nilable(Shared::TranscodeProfileEncoder), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('encoder'), 'decoder': Utils.enum_from_string(Shared::TranscodeProfileEncoder, true) } }

      field :fps, T.nilable(Integer), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('fps') } }

      field :fps_den, T.nilable(Integer), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('fpsDen') } }

      field :gop, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('gop') } }

      field :height, T.nilable(Integer), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('height') } }

      field :name, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('name') } }

      field :profile, T.nilable(Shared::TranscodeProfileProfile), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('profile'), 'decoder': Utils.enum_from_string(Shared::TranscodeProfileProfile, true) } }
      # Restricts the size of the output video using the constant quality feature. Increasing this value will result in a lower quality video. Note that this parameter might not work if the transcoder lacks support for it.
      # 
      field :quality, T.nilable(Integer), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('quality') } }

      field :width, T.nilable(Integer), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('width') } }


      sig { params(bitrate: Integer, encoder: T.nilable(Shared::TranscodeProfileEncoder), fps: T.nilable(Integer), fps_den: T.nilable(Integer), gop: T.nilable(String), height: T.nilable(Integer), name: T.nilable(String), profile: T.nilable(Shared::TranscodeProfileProfile), quality: T.nilable(Integer), width: T.nilable(Integer)).void }
      def initialize(bitrate: nil, encoder: nil, fps: nil, fps_den: nil, gop: nil, height: nil, name: nil, profile: nil, quality: nil, width: nil)
        @bitrate = bitrate
        @encoder = encoder
        @fps = fps
        @fps_den = fps_den
        @gop = gop
        @height = height
        @name = name
        @profile = profile
        @quality = quality
        @width = width
      end
    end
  end
end
