# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'
require_relative '../shared/encryption'
require_relative '../shared/ipfs_export_params'
require_relative '../shared/ffmpeg_profile'
require_relative '../shared/upload'

module Livepeer
  module Shared
    # TaskType - Type of the task
    class TaskType < T::Enum
      enums do
        UPLOAD = new('upload')
        IMPORT = new('import')
        EXPORT = new('export')
        EXPORT_DATA = new('export-data')
        TRANSCODE = new('transcode')
        TRANSCODE_FILE = new('transcode-file')
        CLIP = new('clip')
      end
    end


    # Parameters for the upload task
    class TaskUploadOutput < Livepeer::Utils::FieldAugmented
      extend T::Sig


      field :encryption, T.nilable(Shared::EncryptionOutput), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('encryption') } }
      # ID of the original recorded session to avoid re-transcoding
      # of the same content. Only used for import task.
      # 
      field :recorded_session_id, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('recordedSessionId') } }
      # URL of the asset to "upload"
      field :url, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('url') } }


      sig { params(encryption: T.nilable(Shared::EncryptionOutput), recorded_session_id: T.nilable(String), url: T.nilable(String)).void }
      def initialize(encryption: nil, recorded_session_id: nil, url: nil)
        @encryption = encryption
        @recorded_session_id = recorded_session_id
        @url = url
      end
    end

    # File content to store into IPFS
    class Content < Livepeer::Utils::FieldAugmented
      extend T::Sig



      
      def initialize; end
    end

    # Parameters for the export-data task
    class ExportData < Livepeer::Utils::FieldAugmented
      extend T::Sig

      # File content to store into IPFS
      field :content, Shared::Content, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('content') } }
      # Optional ID of the content
      field :id, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('id') } }

      field :ipfs, T.nilable(Shared::IpfsExportParams), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('ipfs') } }
      # Optional type of content
      field :type, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('type') } }


      sig { params(content: Shared::Content, id: T.nilable(String), ipfs: T.nilable(Shared::IpfsExportParams), type: T.nilable(String)).void }
      def initialize(content: nil, id: nil, ipfs: nil, type: nil)
        @content = content
        @id = id
        @ipfs = ipfs
        @type = type
      end
    end

    # Parameters for the transcode task
    class Transcode < Livepeer::Utils::FieldAugmented
      extend T::Sig

      # LMPS ffmpeg profile
      field :profile, T.nilable(Shared::FfmpegProfile), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('profile') } }


      sig { params(profile: T.nilable(Shared::FfmpegProfile)).void }
      def initialize(profile: nil)
        @profile = profile
      end
    end

    # Input video file to transcode
    class Input < Livepeer::Utils::FieldAugmented
      extend T::Sig

      # URL of a video to transcode, accepts object-store format
      # "s3+https"
      # 
      field :url, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('url') } }


      sig { params(url: T.nilable(String)).void }
      def initialize(url: nil)
        @url = url
      end
    end

    # Storage for the output files
    class TaskStorage < Livepeer::Utils::FieldAugmented
      extend T::Sig

      # URL of the output storage, accepts object-store format
      # "s3+https"
      # 
      field :url, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('url') } }


      sig { params(url: T.nilable(String)).void }
      def initialize(url: nil)
        @url = url
      end
    end

    # HLS output format
    class Hls < Livepeer::Utils::FieldAugmented
      extend T::Sig

      # Path for the HLS output
      field :path, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('path') } }


      sig { params(path: T.nilable(String)).void }
      def initialize(path: nil)
        @path = path
      end
    end

    # MP4 output format
    class Mp4 < Livepeer::Utils::FieldAugmented
      extend T::Sig

      # Path for the MP4 output
      field :path, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('path') } }


      sig { params(path: T.nilable(String)).void }
      def initialize(path: nil)
        @path = path
      end
    end

    # Output formats
    class Outputs < Livepeer::Utils::FieldAugmented
      extend T::Sig

      # HLS output format
      field :hls, T.nilable(Shared::Hls), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('hls') } }
      # MP4 output format
      field :mp4, T.nilable(Shared::Mp4), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('mp4') } }


      sig { params(hls: T.nilable(Shared::Hls), mp4: T.nilable(Shared::Mp4)).void }
      def initialize(hls: nil, mp4: nil)
        @hls = hls
        @mp4 = mp4
      end
    end

    # Parameters for the transcode-file task
    class TranscodeFile < Livepeer::Utils::FieldAugmented
      extend T::Sig


      field :creator_id, T.nilable(Object), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('creatorId') } }
      # Input video file to transcode
      field :input, T.nilable(Shared::Input), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('input') } }
      # Output formats
      field :outputs, T.nilable(Shared::Outputs), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('outputs') } }

      field :profiles, T.nilable(T::Array[Shared::FfmpegProfile]), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('profiles') } }
      # Storage for the output files
      field :storage, T.nilable(Shared::TaskStorage), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('storage') } }
      # How many seconds the duration of each output segment should
      # be
      # 
      field :target_segment_size_secs, T.nilable(Float), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('targetSegmentSizeSecs') } }


      sig { params(creator_id: T.nilable(Object), input: T.nilable(Shared::Input), outputs: T.nilable(Shared::Outputs), profiles: T.nilable(T::Array[Shared::FfmpegProfile]), storage: T.nilable(Shared::TaskStorage), target_segment_size_secs: T.nilable(Float)).void }
      def initialize(creator_id: nil, input: nil, outputs: nil, profiles: nil, storage: nil, target_segment_size_secs: nil)
        @creator_id = creator_id
        @input = input
        @outputs = outputs
        @profiles = profiles
        @storage = storage
        @target_segment_size_secs = target_segment_size_secs
      end
    end

    # Parameters of the task
    class TaskParams < Livepeer::Utils::FieldAugmented
      extend T::Sig

      # Parameters for the export task
      field :export, T.nilable(Object), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('export') } }
      # Parameters for the export-data task
      field :export_data, T.nilable(Shared::ExportData), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('exportData') } }
      # Parameters for the upload task
      field :import, T.nilable(Shared::UploadOutput), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('import') } }
      # Parameters for the transcode task
      field :transcode, T.nilable(Shared::Transcode), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('transcode') } }
      # Parameters for the transcode-file task
      field :transcode_file, T.nilable(Shared::TranscodeFile), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('transcode-file') } }
      # Parameters for the upload task
      field :upload, T.nilable(Shared::TaskUploadOutput), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('upload') } }


      sig { params(export: T.nilable(Object), export_data: T.nilable(Shared::ExportData), import: T.nilable(Shared::UploadOutput), transcode: T.nilable(Shared::Transcode), transcode_file: T.nilable(Shared::TranscodeFile), upload: T.nilable(Shared::TaskUploadOutput)).void }
      def initialize(export: nil, export_data: nil, import: nil, transcode: nil, transcode_file: nil, upload: nil)
        @export = export
        @export_data = export_data
        @import = import
        @transcode = transcode
        @transcode_file = transcode_file
        @upload = upload
      end
    end

    # Strategy to use for clipping the asset. If not specified, the default strategy that Catalyst is configured for will be used. This field only available for admin users, and is only used for E2E testing.
    class ClipStrategy < Livepeer::Utils::FieldAugmented
      extend T::Sig

      # End time of the clip in milliseconds
      field :end_time, T.nilable(Float), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('endTime') } }
      # Playback ID of the stream or asset to clip
      field :playback_id, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('playbackId') } }
      # Start time of the clip in milliseconds
      field :start_time, T.nilable(Float), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('startTime') } }


      sig { params(end_time: T.nilable(Float), playback_id: T.nilable(String), start_time: T.nilable(Float)).void }
      def initialize(end_time: nil, playback_id: nil, start_time: nil)
        @end_time = end_time
        @playback_id = playback_id
        @start_time = start_time
      end
    end

    # CatalystPipelineStrategy - Force to use a specific strategy in the Catalyst pipeline. If not specified, the default strategy that Catalyst is configured for will be used. This field only available for admin users, and is only used for E2E testing.
    class CatalystPipelineStrategy < T::Enum
      enums do
        CATALYST = new('catalyst')
        CATALYST_FFMPEG = new('catalyst_ffmpeg')
        BACKGROUND_EXTERNAL = new('background_external')
        BACKGROUND_MIST = new('background_mist')
        FALLBACK_EXTERNAL = new('fallback_external')
        EXTERNAL = new('external')
      end
    end



    class Clip < Livepeer::Utils::FieldAugmented
      extend T::Sig

      # Force to use a specific strategy in the Catalyst pipeline. If not specified, the default strategy that Catalyst is configured for will be used. This field only available for admin users, and is only used for E2E testing.
      field :catalyst_pipeline_strategy, T.nilable(Shared::CatalystPipelineStrategy), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('catalystPipelineStrategy'), 'decoder': Utils.enum_from_string(Shared::CatalystPipelineStrategy, true) } }
      # Strategy to use for clipping the asset. If not specified, the default strategy that Catalyst is configured for will be used. This field only available for admin users, and is only used for E2E testing.
      field :clip_strategy, T.nilable(Shared::ClipStrategy), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('clipStrategy') } }
      # ID of the input asset or stream
      field :input_id, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('inputId') } }
      # ID of the session
      field :session_id, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('sessionId') } }
      # URL of the asset to "clip"
      field :url, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('url') } }


      sig { params(catalyst_pipeline_strategy: T.nilable(Shared::CatalystPipelineStrategy), clip_strategy: T.nilable(Shared::ClipStrategy), input_id: T.nilable(String), session_id: T.nilable(String), url: T.nilable(String)).void }
      def initialize(catalyst_pipeline_strategy: nil, clip_strategy: nil, input_id: nil, session_id: nil, url: nil)
        @catalyst_pipeline_strategy = catalyst_pipeline_strategy
        @clip_strategy = clip_strategy
        @input_id = input_id
        @session_id = session_id
        @url = url
      end
    end

    # TaskPhase - Phase of the task
    class TaskPhase < T::Enum
      enums do
        PENDING = new('pending')
        WAITING = new('waiting')
        RUNNING = new('running')
        FAILED = new('failed')
        COMPLETED = new('completed')
        CANCELLED = new('cancelled')
      end
    end


    # Status of the task
    class TaskStatus < Livepeer::Utils::FieldAugmented
      extend T::Sig

      # Phase of the task
      field :phase, Shared::TaskPhase, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('phase'), 'decoder': Utils.enum_from_string(Shared::TaskPhase, false) } }
      # Timestamp (in milliseconds) at which task was updated
      field :updated_at, Float, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('updatedAt') } }
      # Error message if the task failed
      field :error_message, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('errorMessage') } }
      # Current progress of the task in a 0-1 ratio
      field :progress, T.nilable(Float), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('progress') } }
      # Number of retries done on the task
      field :retries, T.nilable(Float), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('retries') } }


      sig { params(phase: Shared::TaskPhase, updated_at: Float, error_message: T.nilable(String), progress: T.nilable(Float), retries: T.nilable(Float)).void }
      def initialize(phase: nil, updated_at: nil, error_message: nil, progress: nil, retries: nil)
        @phase = phase
        @updated_at = updated_at
        @error_message = error_message
        @progress = progress
        @retries = retries
      end
    end


    class TaskIpfs < Livepeer::Utils::FieldAugmented
      extend T::Sig

      # IPFS CID of the exported video file
      field :video_file_cid, String, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('videoFileCid') } }
      # IPFS CID of the default metadata exported for the video
      field :nft_metadata_cid, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('nftMetadataCid') } }
      # URL to access metadata file via HTTP through an IPFS
      # gateway
      # 
      field :nft_metadata_gateway_url, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('nftMetadataGatewayUrl') } }
      # URL for the metadata file with the IPFS protocol
      field :nft_metadata_url, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('nftMetadataUrl') } }
      # URL to access file via HTTP through an IPFS gateway
      field :video_file_gateway_url, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('videoFileGatewayUrl') } }
      # URL for the file with the IPFS protocol
      field :video_file_url, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('videoFileUrl') } }


      sig { params(video_file_cid: String, nft_metadata_cid: T.nilable(String), nft_metadata_gateway_url: T.nilable(String), nft_metadata_url: T.nilable(String), video_file_gateway_url: T.nilable(String), video_file_url: T.nilable(String)).void }
      def initialize(video_file_cid: nil, nft_metadata_cid: nil, nft_metadata_gateway_url: nil, nft_metadata_url: nil, video_file_gateway_url: nil, video_file_url: nil)
        @video_file_cid = video_file_cid
        @nft_metadata_cid = nft_metadata_cid
        @nft_metadata_gateway_url = nft_metadata_gateway_url
        @nft_metadata_url = nft_metadata_url
        @video_file_gateway_url = video_file_gateway_url
        @video_file_url = video_file_url
      end
    end

    # Output of the export task
    class Export < Livepeer::Utils::FieldAugmented
      extend T::Sig


      field :ipfs, T.nilable(Shared::TaskIpfs), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('ipfs') } }


      sig { params(ipfs: T.nilable(Shared::TaskIpfs)).void }
      def initialize(ipfs: nil)
        @ipfs = ipfs
      end
    end


    class TaskSchemasIpfs < Livepeer::Utils::FieldAugmented
      extend T::Sig

      # IPFS CID of the exported data
      field :cid, String, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('cid') } }


      sig { params(cid: String).void }
      def initialize(cid: nil)
        @cid = cid
      end
    end

    # Output of the export data task
    class TaskExportData < Livepeer::Utils::FieldAugmented
      extend T::Sig


      field :ipfs, T.nilable(Shared::TaskSchemasIpfs), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('ipfs') } }


      sig { params(ipfs: T.nilable(Shared::TaskSchemasIpfs)).void }
      def initialize(ipfs: nil)
        @ipfs = ipfs
      end
    end


    class TaskTranscode < Livepeer::Utils::FieldAugmented
      extend T::Sig


      field :asset, T.nilable(T::Hash[Symbol, Object]), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('asset') } }


      sig { params(asset: T.nilable(T::Hash[Symbol, Object])).void }
      def initialize(asset: nil)
        @asset = asset
      end
    end

    # Output of the task
    class Output < Livepeer::Utils::FieldAugmented
      extend T::Sig

      # Output of the export task
      field :export, T.nilable(Shared::Export), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('export') } }
      # Output of the export data task
      field :export_data, T.nilable(Shared::TaskExportData), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('exportData') } }
      # Output of the upload task
      field :import, T.nilable(T::Hash[Symbol, Object]), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('import') } }

      field :transcode, T.nilable(Shared::TaskTranscode), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('transcode') } }
      # Output of the upload task
      field :upload, T.nilable(T::Hash[Symbol, Object]), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('upload') } }


      sig { params(export: T.nilable(Shared::Export), export_data: T.nilable(Shared::TaskExportData), import: T.nilable(T::Hash[Symbol, Object]), transcode: T.nilable(Shared::TaskTranscode), upload: T.nilable(T::Hash[Symbol, Object])).void }
      def initialize(export: nil, export_data: nil, import: nil, transcode: nil, upload: nil)
        @export = export
        @export_data = export_data
        @import = import
        @transcode = transcode
        @upload = upload
      end
    end


    class Task < Livepeer::Utils::FieldAugmented
      extend T::Sig


      field :clip, T.nilable(Shared::Clip), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('clip') } }
      # Timestamp (in milliseconds) at which task was created
      field :created_at, T.nilable(Float), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('createdAt') } }
      # Task ID
      field :id, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('id') } }
      # ID of the input asset
      field :input_asset_id, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('inputAssetId') } }
      # Output of the task
      field :output, T.nilable(Shared::Output), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('output') } }
      # ID of the output asset
      field :output_asset_id, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('outputAssetId') } }
      # Parameters of the task
      field :params, T.nilable(Shared::TaskParams), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('params') } }
      # Timestamp (in milliseconds) at which the task was scheduled for
      # execution (e.g. after file upload finished).
      # 
      field :scheduled_at, T.nilable(Float), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('scheduledAt') } }
      # Status of the task
      field :status, T.nilable(Shared::TaskStatus), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('status') } }
      # Type of the task
      field :type, T.nilable(Shared::TaskType), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('type'), 'decoder': Utils.enum_from_string(Shared::TaskType, true) } }


      sig { params(clip: T.nilable(Shared::Clip), created_at: T.nilable(Float), id: T.nilable(String), input_asset_id: T.nilable(String), output: T.nilable(Shared::Output), output_asset_id: T.nilable(String), params: T.nilable(Shared::TaskParams), scheduled_at: T.nilable(Float), status: T.nilable(Shared::TaskStatus), type: T.nilable(Shared::TaskType)).void }
      def initialize(clip: nil, created_at: nil, id: nil, input_asset_id: nil, output: nil, output_asset_id: nil, params: nil, scheduled_at: nil, status: nil, type: nil)
        @clip = clip
        @created_at = created_at
        @id = id
        @input_asset_id = input_asset_id
        @output = output
        @output_asset_id = output_asset_id
        @params = params
        @scheduled_at = scheduled_at
        @status = status
        @type = type
      end
    end

    # Parameters for the upload task
    class TaskUpload < Livepeer::Utils::FieldAugmented
      extend T::Sig


      field :encryption, T.nilable(Shared::Encryption), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('encryption') } }
      # ID of the original recorded session to avoid re-transcoding
      # of the same content. Only used for import task.
      # 
      field :recorded_session_id, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('recordedSessionId') } }
      # URL of the asset to "upload"
      field :url, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('url') } }


      sig { params(encryption: T.nilable(Shared::Encryption), recorded_session_id: T.nilable(String), url: T.nilable(String)).void }
      def initialize(encryption: nil, recorded_session_id: nil, url: nil)
        @encryption = encryption
        @recorded_session_id = recorded_session_id
        @url = url
      end
    end

    # Parameters of the task
    class Params < Livepeer::Utils::FieldAugmented
      extend T::Sig

      # Parameters for the export task
      field :export, T.nilable(Object), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('export') } }
      # Parameters for the export-data task
      field :export_data, T.nilable(Shared::ExportData), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('exportData') } }
      # Parameters for the upload task
      field :import, T.nilable(Shared::Upload), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('import') } }
      # Parameters for the transcode task
      field :transcode, T.nilable(Shared::Transcode), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('transcode') } }
      # Parameters for the transcode-file task
      field :transcode_file, T.nilable(Shared::TranscodeFile), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('transcode-file') } }
      # Parameters for the upload task
      field :upload, T.nilable(Shared::TaskUpload), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('upload') } }


      sig { params(export: T.nilable(Object), export_data: T.nilable(Shared::ExportData), import: T.nilable(Shared::Upload), transcode: T.nilable(Shared::Transcode), transcode_file: T.nilable(Shared::TranscodeFile), upload: T.nilable(Shared::TaskUpload)).void }
      def initialize(export: nil, export_data: nil, import: nil, transcode: nil, transcode_file: nil, upload: nil)
        @export = export
        @export_data = export_data
        @import = import
        @transcode = transcode
        @transcode_file = transcode_file
        @upload = upload
      end
    end


    class TaskIpfsInput < Livepeer::Utils::FieldAugmented
      extend T::Sig

      # IPFS CID of the exported video file
      field :video_file_cid, String, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('videoFileCid') } }
      # IPFS CID of the default metadata exported for the video
      field :nft_metadata_cid, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('nftMetadataCid') } }


      sig { params(video_file_cid: String, nft_metadata_cid: T.nilable(String)).void }
      def initialize(video_file_cid: nil, nft_metadata_cid: nil)
        @video_file_cid = video_file_cid
        @nft_metadata_cid = nft_metadata_cid
      end
    end

    # Output of the export task
    class TaskExport < Livepeer::Utils::FieldAugmented
      extend T::Sig


      field :ipfs, T.nilable(Shared::TaskIpfsInput), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('ipfs') } }


      sig { params(ipfs: T.nilable(Shared::TaskIpfsInput)).void }
      def initialize(ipfs: nil)
        @ipfs = ipfs
      end
    end

    # Output of the task
    class TaskOutput < Livepeer::Utils::FieldAugmented
      extend T::Sig

      # Output of the export task
      field :export, T.nilable(Shared::TaskExport), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('export') } }
      # Output of the export data task
      field :export_data, T.nilable(Shared::TaskExportData), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('exportData') } }
      # Output of the upload task
      field :import, T.nilable(T::Hash[Symbol, Object]), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('import') } }

      field :transcode, T.nilable(Shared::TaskTranscode), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('transcode') } }
      # Output of the upload task
      field :upload, T.nilable(T::Hash[Symbol, Object]), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('upload') } }


      sig { params(export: T.nilable(Shared::TaskExport), export_data: T.nilable(Shared::TaskExportData), import: T.nilable(T::Hash[Symbol, Object]), transcode: T.nilable(Shared::TaskTranscode), upload: T.nilable(T::Hash[Symbol, Object])).void }
      def initialize(export: nil, export_data: nil, import: nil, transcode: nil, upload: nil)
        @export = export
        @export_data = export_data
        @import = import
        @transcode = transcode
        @upload = upload
      end
    end


    class TaskInput < Livepeer::Utils::FieldAugmented
      extend T::Sig


      field :clip, T.nilable(Shared::Clip), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('clip') } }
      # ID of the input asset
      field :input_asset_id, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('inputAssetId') } }
      # Output of the task
      field :output, T.nilable(Shared::TaskOutput), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('output') } }
      # ID of the output asset
      field :output_asset_id, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('outputAssetId') } }
      # Parameters of the task
      field :params, T.nilable(Shared::Params), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('params') } }
      # Type of the task
      field :type, T.nilable(Shared::TaskType), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('type'), 'decoder': Utils.enum_from_string(Shared::TaskType, true) } }


      sig { params(clip: T.nilable(Shared::Clip), input_asset_id: T.nilable(String), output: T.nilable(Shared::TaskOutput), output_asset_id: T.nilable(String), params: T.nilable(Shared::Params), type: T.nilable(Shared::TaskType)).void }
      def initialize(clip: nil, input_asset_id: nil, output: nil, output_asset_id: nil, params: nil, type: nil)
        @clip = clip
        @input_asset_id = input_asset_id
        @output = output
        @output_asset_id = output_asset_id
        @params = params
        @type = type
      end
    end
  end
end
