# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'

module Livepeer
  module Shared

    class Type < T::Enum
      enums do
        PUBLIC = new('public')
        JWT = new('jwt')
        WEBHOOK = new('webhook')
      end
    end


    # Whether the playback policy for a asset or stream is public or signed
    class PlaybackPolicy < Livepeer::Utils::FieldAugmented
      extend T::Sig


      field :type, Shared::Type, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('type'), 'decoder': Utils.enum_from_string(Shared::Type, false) } }
      # User-defined webhook context
      field :webhook_context, T.nilable(T::Hash[Symbol, Object]), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('webhookContext') } }
      # ID of the webhook to use for playback policy
      field :webhook_id, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('webhookId') } }


      sig { params(type: Shared::Type, webhook_context: T.nilable(T::Hash[Symbol, Object]), webhook_id: T.nilable(String)).void }
      def initialize(type: nil, webhook_context: nil, webhook_id: nil)
        @type = type
        @webhook_context = webhook_context
        @webhook_id = webhook_id
      end
    end
  end
end
