# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'

module Livepeer
  module Shared
    # Inline multistream target object. Will automatically
    # create the target resource to be used by the created
    # stream.
    # 
    class TargetAddPayloadSpec < Livepeer::Utils::FieldAugmented
      extend T::Sig

      # Livepeer-compatible multistream target URL (RTMP(S) or SRT)
      field :url, String, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('url') } }

      field :name, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('name') } }


      sig { params(url: String, name: T.nilable(String)).void }
      def initialize(url: nil, name: nil)
        @url = url
        @name = name
      end
    end


    class TargetAddPayload < Livepeer::Utils::FieldAugmented
      extend T::Sig

      # Name of transcoding profile that should be sent. Use
      # "source" for pushing source stream data
      # 
      field :profile, String, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('profile') } }
      # ID of multistream target object where to push this stream
      field :id, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('id') } }
      # Inline multistream target object. Will automatically
      # create the target resource to be used by the created
      # stream.
      # 
      field :spec, T.nilable(Shared::TargetAddPayloadSpec), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('spec') } }
      # If true, the stream audio will be muted and only silent
      # video will be pushed to the target.
      # 
      field :video_only, T.nilable(T::Boolean), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('videoOnly') } }


      sig { params(profile: String, id: T.nilable(String), spec: T.nilable(Shared::TargetAddPayloadSpec), video_only: T.nilable(T::Boolean)).void }
      def initialize(profile: nil, id: nil, spec: nil, video_only: nil)
        @profile = profile
        @id = id
        @spec = spec
        @video_only = video_only
      end
    end
  end
end
