# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'

module Livepeer
  module Shared

    class ClipPayload < Livepeer::Utils::FieldAugmented
      extend T::Sig

      # Playback ID of the stream or asset to clip
      field :playback_id, String, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('playbackId') } }
      # Start time of the clip in milliseconds
      field :start_time, Float, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('startTime') } }
      # End time of the clip in milliseconds
      field :end_time, T.nilable(Float), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('endTime') } }
      # Name of the clip
      field :name, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('name') } }
      # Session ID of the stream to clip
      field :session_id, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('sessionId') } }


      sig { params(playback_id: String, start_time: Float, end_time: T.nilable(Float), name: T.nilable(String), session_id: T.nilable(String)).void }
      def initialize(playback_id: nil, start_time: nil, end_time: nil, name: nil, session_id: nil)
        @playback_id = playback_id
        @start_time = start_time
        @end_time = end_time
        @name = name
        @session_id = session_id
      end
    end
  end
end
